Given an expression string exp. Examine whether the pairs and the orders of “{“,”}”,”(“,”)”,”[“,”]” are correct in exp.
For example, the program should print 'balanced' for exp = “[()]{}{[()()]()}” and 'not balanced' for exp = “[(])”

Input:
The first line of input contains an integer T denoting the number of test cases.  Each test case consists of a string of expression, in a separate line.

Output:
Print 'balanced' without quotes if the pair of parenthesis is balanced else print 'not balanced' in a separate line.

Constraints:
1 ≤ T ≤ 100
1 ≤ |s| ≤ 105

Example:
Input:
3
{([])}
()
([]

Output:
balanced
balanced
not balanced

*****Code***********************
#include<iostream>
#include<algorithm>
#include<bits/stdc++.h>
#include<queue>
using namespace std;

bool isBalance(string str)
{
  int len=str.length();
  char x;
  stack<char>st;
  //int i=0;
  for(int i=0;i<len;i++)
  {
    if(str[i]=='{' || str[i]=='[' || str[i]=='(')
    {
      st.push(str[i]);
      continue;
    }
    if(st.empty())
    {
      return false;
    }
    switch(str[i])
    {
      case ')':
              x=st.top();
              st.pop();
              if(x=='{' || x=='[')
              {
                return false;
              }
              break;
      case '}':
              x=st.top();
              st.pop();
              if(x=='[' || x=='(')
              {
                return false;
              }
              break;
      case ']':
              x=st.top();
              st.pop();
              if(x=='(' || x=='{')
              {
                return false;
              }
              break;
    }
  }
  return(st.empty());
}

int main()
{
  int test;
  std::cin>>test;
  while(test--)
  {
    string str;
    std::cin>>str;
    if(isBalance(str))
    {
      std::cout<<"balanced"<<endl;
    }
    else
    {
      std::cout<<"not balanced"<<endl;
    }
  }
  return 0;
}
